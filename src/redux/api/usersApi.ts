import { createEntityAdapter, createSelector } from '@reduxjs/toolkit';
import apiSlice from './api';

interface IUser {
  [key: string]: any;
}

interface IUsersResponse {
  success: boolean;
  found: number;
  users: any[];
}

interface IUserResponse {
  success: boolean;
  user: IUser;
}

const usersAdapters = createEntityAdapter({});
const initialState = usersAdapters.getInitialState();

const usersApiSlice = apiSlice.injectEndpoints({
  endpoints: (builder) => ({
    getMe: builder.query<any, any>({
      query: () => 'users/me',
      providesTags: [{ type: 'User', id: 'me' }],
    }),
    updateMe: builder.mutation<any, any>({
      query: (data) => ({
        url: 'users/me',
        method: 'PUT',
        body: data,
      }),
      invalidatesTags: [{ type: 'User', id: 'me' }],
    }),
    getUsers: builder.query<any, void>({
      query: () => 'users',
      transformResponse: (response: IUsersResponse) => {
        const loadedUsers = response?.users.map((user) => {
          user.id = user._id;
          return user;
        });
        return usersAdapters.setAll(initialState, loadedUsers);
      },
      providesTags: (result: any) => {
        if (result?.ids) {
          return [
            { type: 'User', id: 'LIST' },
            ...result.ids.map((id: string) => ({ type: 'User', id })),
          ];
        }
        return [{ type: 'User', id: 'LIST' }];
      },
    }),
    getUser: builder.query<IUserResponse, string>({
      query: (id) => `user/${id}`,
      transformResponse: (response: any) => {
        return response;
      },
      providesTags: (result, error, id) =>
        result ? [{ type: 'User', id }] : ['User'],
    }),
    // updateUser:
    // deleteUser:
  }),
  overrideExisting: false,
});

export const {
  useGetMeQuery,
  useUpdateMeMutation,
  useGetUsersQuery,
  useGetUserQuery,
} = usersApiSlice;

// Returns query result object.
export const selectUsersResult = usersApiSlice.endpoints.getUsers.select();

// Creates memoized selector.
const selectUsersData = createSelector(
  selectUsersResult,
  (usersResult) => usersResult.data, // normalized state with ids and entities.
);

// Exporting renamed selectors generated by `getSelectors`.
export const {
  selectAll: selectAllUsers,
  selectById: selectUserById,
  selectIds: selectUserIds,
} = usersAdapters.getSelectors(
  (state: any) => selectUsersData(state) ?? initialState,
);
